import { KeyTools, Encoder } from './key-tools';
import axios from 'axios';
import { ClientSigningRequest, ClientRateToken } from './backend';

function addMinutes(date:Date, minutes: number): Date {
  return new Date(date.getTime() + minutes*60000);
}

export enum FixedSideEnum {
  BUY = 'BUY',
  SELL = 'SELL'
}

interface Rate {
  symbol: string;
  fixed_side: FixedSideEnum;
  buy_volume: number;
  sell_volume: number;
  rate: number;
  settlement_fee: number;
}

export class Client {

  private encoder: Encoder
  private keyTool: KeyTools
  private apiUrl: string;
  private appUrl: string;

  constructor(
    private partnerId: string,
    private baseUrl = 'staging.altalix.com'
  ){
    this.encoder = new Encoder(window);
    this.keyTool = new KeyTools(window.crypto, this.encoder);
    this.apiUrl = `https://app.${this.baseUrl}/api`
    this.appUrl = `https://app.${this.baseUrl}`
  }

  async generateSigningRequest(): Promise<ClientSigningRequest> {
    // TODO: Somewhere inside the UI - grab these details
    return {
      sellCurrency: 'EUR',
      buyCurrency: 'ETH',
      buyAmount: 3,
      address: '0x093a919323d808d08bd7E72E3dFE0666BeB8D91E'
    }
  }

  async getParterRateToken(): Promise<ClientRateToken> {
    // PARTNER TODO: Axios call to partner hosted backend to get a
    // Quote token
    throw new Error("Not implemented error");
  }

  async getQuote(
    token: ClientRateToken,
    buyCurrency: string,
    sellVolume: number,
  ): Promise<Rate> {
    // TODO: We should retreive this from the currencies endpoint to get the
    // correct code
    const symbol = `${buyCurrency}EUR`
    return axios.get<Rate>(
      `${this.apiUrl}/rates`,
      {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
          'Access-Control-Allow-Origin': '*' // TODO: Can I now remove this?
        },
        params: {
          symbol,
          sell_volume: sellVolume
        }
      }
    ).then(rate => {
      return rate.data;
    })
  }


  private generateJsonParams(req: ClientSigningRequest){
    return {
      sell_currency: req.sellAmount,
      buy_currency: req.buyAmount,
      buy_amount: req.buyAmount,
      address: req.address,
      partner_id: partnerId
    };
  }
}
